package 命令模式;

/**
 * Created by asd on 2016/9/28.
 */
/*
    需求:
        某个方法需要完成某一个行为,但这个行为的具体实现无法确定,
        必须等到执行该方法时才确定
    例如:
        假设有个方法需要遍历某个数组,但无法确定在遍历数组时如何处理
        这些元素,需要在调用该方法时指定具体的处理行为.
 */

/*
  概念:
      将来自客户端的请求传入一个对象,从而使你可用不同的请求对客户进行参数化.
      用于"行为请求者"与"行为实现者"解耦,可实现二者之间松耦合,以便适合变化
      分离变化与不变的因素

  客户端角色:
      创建一个具体命令对象并确定其接收者-----------CommandTest

  命令角色:
      声明了一个给所有命令类的抽象接口------------Command

  具体命令角色:
      定义一个接收者和行为之间的弱耦合,实现方法,负责调用接收者的相应操作-------AddCommand --- PrinterCommand

  请求者角色:
      负责调用命令对象真实性请求,相关的方法叫做行动方法----------command.process();

  接收者角色:
          负责具体实施和执行一个请求
          任何一个类都可以成为接收者,实施和执行请求的方法叫做行动的方法.-----------ArrayProcess
*/
/*
    理解:
        1:建立一个接口,定义了命令的行为
        2:创建类实现接口
        3:定义一个接收者类,提供方法传入接口类型的形参,(多态)
        4:测试类创建接收者类对象,传入的是哪个实现类,具体就做出什么行为.
 */


public class CommandTest {
    public static void main(String[] args) {
        int[] arr = {2, 34, 5, 6, 7,};
        ArrayProcess ap = new ArrayProcess();
        ap.method(arr, new AddCommand());
        /////////////////////////////////////////

        ap.method(arr, new PrinterCommand());


    }
}
