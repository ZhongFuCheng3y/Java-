package 简单工厂模式;

/**
 * Created by asd on 2016/9/27.
 */
/*
    简单工厂模式
        又叫做是静态工厂方法模式,它定义了一个具体的工厂类负责创建一些类的实例

    优点:
        1:客户端不需要在负责对象的创建,从而明确了各个类的职责
    缺点:
        1:这个静态工厂类负责所有对象的创建,如果有新的对象增加,或者某个对象的创建方式不同.
        就需要不断的修改工厂类,不利于后期的维护
 */
/*
    1:假如创建对象是一个非常复杂的工作,我们可以把创建对象交给一个类来定义
    2:这样能够明确各个类的分工,更符合面向对象设计
 */
/*
    1:现在我有很多动物,已经构成了一个动物的体系
    2:我们不可能用什么对象,该类就new一个对象出来,这样不好,类的分工不够明确
    3:定义一个创建动物对象的类-----号称什么动物都能创建出来.

 */
public class AnimalDemo {
    public static void main(String[] args) {
        //具体类的调用
        Dog d = new Dog();
        d.eat();
        Cat c = new Cat();
        c.eat();
        System.out.println("----------------");

        //有了工厂以后,我们就不需要自己造对象了
        //写不同的方法,创建出不同的对象.
        Dog dd = AnimalFactory.createDog();
        dd.eat();
        Cat cc = AnimalFactory.createCat();
        cc.eat();
        System.out.println("-----------------------");
        /**
         * 上面的方法不好
         *  1:代码重复度较高
         *  2:我们应该利用多态来改进
         *  3:既然都是动物,我们可以用Animal作为返回值,只要你想要什么动物,你传进来,我就给你造什么动物.
         */

         //改进
        Animal A = AnimalFactory.createAniaml("dog");
        A.eat();
        Animal C = AnimalFactory.createAniaml("cat");
        C.eat();


        /*
            现在问题来了:
                1:我想要一个猪,可是我的工厂类没有猪
                2:我就去改代码,写可以创建猪对象的
                3:接着,我又要其他的动物
                4:我还是得改代码
                5...................
                6:这就是简单工厂类的缺点,当需求改变了,我就要改代码.
         */

    }
}
