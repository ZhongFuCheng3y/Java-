集合的由来
    1:我们学习的是面向对象的语言,为了方便操作多个对象,我们必须把对象进行存储
    2:想要对多个对象进行存储,就不能是一个基本的变量
    3:需要的是一个容器,我们知道的容器有数组,StringBuffer
    4:StringBuffer结果是一个字符串,数组--虽然有对象数组,但对象数组的长度是固定的.
    5:所以,java为我们提供了集合类


数组和集合的区别:
    1:长度的区别
        数组的长度固定
        集合的长度可变
    2:内容不容
        数组存储的是同一种类型的元素
        集合可以存储不同类型的元素
    3:元素的数据类型
        数组可以存储基本数据类型,也可以存储引用类型
        集合只能存储引用类型

Collection类的由来:
    1:集合可以存储多个元素,但我们对多个元素也有不同的需求
    2:比如,我要这么多个元素,不能有相同的
    3:再比如,我要这么多个元素,能够按照某个规则排序
    4:针对不同的需求,java就提供了很多集合类.
    5:多个集合类的数据结构不同,但是,结构不重要.
    6:重要的是能够存储东西,能够判断,获取
    7:所以,集合类是有共性的.
    8:把集合共性的内容不断往上提取,最终形成集合的继承体系.


Collection的功能:
    1:添加功能
        boolean add(Objcet obj):添加一个元素
        boolean addAll(Collection c):添加一个集合的元素
    2:删除功能:
        void clear():移除所有的元素
        boolean remove(Object):移除一个元素
        boolean removeAll(Collection c):移除一个集合的元素,只要一个元素被移除了,就返回true
    3:判断功能:
        boolean contains(Object o):判断集合是否包含该元素
        boolean containsAll(Collection c):判断集合中是否包含指定的集合元素,只有包含所有的元素,才叫包含
        boolean isEmpty():判断集合是否为空
    4:获取功能:
        Iterator<E> iterator():迭代器
    5:长度功能:
        int size():元素的个数
    6:交集功能:
        boolean retainAll(Collection c):移除此collection中未包含在指定collection中的所有元素。
        集合A和集合B做交集,最终的结果保存在集合A,返回值表示的是A是否发生过变化.






